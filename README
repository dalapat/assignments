Eric Calder
ecalder6@jhu.edu

For the interpreter I implemented boxes and a stack in a visitor as recommended
in the assignment. I implemented 2 visitors, one for symbol table to make the
environment and one for the AST tree to actually run the program. 

For the symbol table visitor, I used deep copy in making array box to ensure
changing value of one index will not affect change values of all indicies in the
array.

For the AST visitor, I used deep copy for assignment of arrays and records. This
is needed to ensure that changing an array or record will only change itself.
Thanks to the error checking we've done in the previous assignments, there are
only a few needed to be handled by the interpreter. To include positions in the
error messages, I embedded tokens into AST nodes and and boxes. 

For the stack I did something a bit different from what Peter went over in
class. Instead of pushing boxes onto the stack, I push names of the boxes onto
the stack. When a name is popped, the environment looks it up to return the
desired box. I did it this way because for a field node, you need to know the
name in order to retrieve the field.

Finally being able to run Simple programs is very exciting!